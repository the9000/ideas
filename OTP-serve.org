* OTP-serve
A web server that serves files on a path that includes an OTP code.
- The OTP is the last directory part of the served path, allowing for sensible file names.
- One OTP per file or per directory.
- Easy to support S3 protocol for download only.
** Implementations:
  - A Lua-based rewrite rule for nginx.
  - A drop-in tiny HTTP server written in (naturally) Rust, or maybe Go, to run behind any fronting server.
*** Two configuration files
Each file is referred to using a moniker, because local file names can repeat, and paths be unwieldy.
  - Moniker to OTP parameters; edited to add / remove served paths.
  - Moniker to filesystem / webroot path, for easy mounting.
*** Admin interface
A separate server that updates the configuration files. Needs auth, etc.
- Any kind: a Web UI, API, TUI / CLI via ssh, etc.
- Should listen on a separate port, etc.
** Upsides:
  - Security through unpredictability, without encryption.
  - Links, if leaked, auto-expire quickly.
  - No need to pre-share keys except OTP.
  - OTP apps abound, a standard algorithm.
** Downsides:
  - Long files cannot be re-downloaded after the OTP expires.
    - May be alleviated by accepting a wider range.
  - Rotation time has to depend on the file size.
